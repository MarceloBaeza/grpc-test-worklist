// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/Worklist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorklistServiceClient is the client API for WorklistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorklistServiceClient interface {
	CreateListWork(ctx context.Context, in *InputRequestCreateListWork, opts ...grpc.CallOption) (*WorkList, error)
	CreateWorkOfListWorks(ctx context.Context, in *RequestWorkAssociateListWorks, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateWork(ctx context.Context, in *RequestCreateWork, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteWork(ctx context.Context, in *RequestDeleteWork, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListWorks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseWorkList, error)
}

type worklistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorklistServiceClient(cc grpc.ClientConnInterface) WorklistServiceClient {
	return &worklistServiceClient{cc}
}

func (c *worklistServiceClient) CreateListWork(ctx context.Context, in *InputRequestCreateListWork, opts ...grpc.CallOption) (*WorkList, error) {
	out := new(WorkList)
	err := c.cc.Invoke(ctx, "/grpc.worklistService/CreateListWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worklistServiceClient) CreateWorkOfListWorks(ctx context.Context, in *RequestWorkAssociateListWorks, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.worklistService/CreateWorkOfListWorks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worklistServiceClient) CreateWork(ctx context.Context, in *RequestCreateWork, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.worklistService/CreateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worklistServiceClient) DeleteWork(ctx context.Context, in *RequestDeleteWork, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.worklistService/DeleteWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worklistServiceClient) ListWorks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseWorkList, error) {
	out := new(ResponseWorkList)
	err := c.cc.Invoke(ctx, "/grpc.worklistService/ListWorks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorklistServiceServer is the server API for WorklistService service.
// All implementations must embed UnimplementedWorklistServiceServer
// for forward compatibility
type WorklistServiceServer interface {
	CreateListWork(context.Context, *InputRequestCreateListWork) (*WorkList, error)
	CreateWorkOfListWorks(context.Context, *RequestWorkAssociateListWorks) (*emptypb.Empty, error)
	CreateWork(context.Context, *RequestCreateWork) (*emptypb.Empty, error)
	DeleteWork(context.Context, *RequestDeleteWork) (*emptypb.Empty, error)
	ListWorks(context.Context, *emptypb.Empty) (*ResponseWorkList, error)
	mustEmbedUnimplementedWorklistServiceServer()
}

// UnimplementedWorklistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorklistServiceServer struct {
}

func (UnimplementedWorklistServiceServer) CreateListWork(context.Context, *InputRequestCreateListWork) (*WorkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListWork not implemented")
}
func (UnimplementedWorklistServiceServer) CreateWorkOfListWorks(context.Context, *RequestWorkAssociateListWorks) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkOfListWorks not implemented")
}
func (UnimplementedWorklistServiceServer) CreateWork(context.Context, *RequestCreateWork) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWork not implemented")
}
func (UnimplementedWorklistServiceServer) DeleteWork(context.Context, *RequestDeleteWork) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWork not implemented")
}
func (UnimplementedWorklistServiceServer) ListWorks(context.Context, *emptypb.Empty) (*ResponseWorkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorks not implemented")
}
func (UnimplementedWorklistServiceServer) mustEmbedUnimplementedWorklistServiceServer() {}

// UnsafeWorklistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorklistServiceServer will
// result in compilation errors.
type UnsafeWorklistServiceServer interface {
	mustEmbedUnimplementedWorklistServiceServer()
}

func RegisterWorklistServiceServer(s grpc.ServiceRegistrar, srv WorklistServiceServer) {
	s.RegisterService(&WorklistService_ServiceDesc, srv)
}

func _WorklistService_CreateListWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputRequestCreateListWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorklistServiceServer).CreateListWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.worklistService/CreateListWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorklistServiceServer).CreateListWork(ctx, req.(*InputRequestCreateListWork))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorklistService_CreateWorkOfListWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWorkAssociateListWorks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorklistServiceServer).CreateWorkOfListWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.worklistService/CreateWorkOfListWorks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorklistServiceServer).CreateWorkOfListWorks(ctx, req.(*RequestWorkAssociateListWorks))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorklistService_CreateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorklistServiceServer).CreateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.worklistService/CreateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorklistServiceServer).CreateWork(ctx, req.(*RequestCreateWork))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorklistService_DeleteWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorklistServiceServer).DeleteWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.worklistService/DeleteWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorklistServiceServer).DeleteWork(ctx, req.(*RequestDeleteWork))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorklistService_ListWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorklistServiceServer).ListWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.worklistService/ListWorks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorklistServiceServer).ListWorks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WorklistService_ServiceDesc is the grpc.ServiceDesc for WorklistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorklistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.worklistService",
	HandlerType: (*WorklistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateListWork",
			Handler:    _WorklistService_CreateListWork_Handler,
		},
		{
			MethodName: "CreateWorkOfListWorks",
			Handler:    _WorklistService_CreateWorkOfListWorks_Handler,
		},
		{
			MethodName: "CreateWork",
			Handler:    _WorklistService_CreateWork_Handler,
		},
		{
			MethodName: "DeleteWork",
			Handler:    _WorklistService_DeleteWork_Handler,
		},
		{
			MethodName: "ListWorks",
			Handler:    _WorklistService_ListWorks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Worklist.proto",
}
